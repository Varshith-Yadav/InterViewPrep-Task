name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t myapp:${{ github.sha }} .
        docker tag myapp:${{ github.sha }} myapp:latest
    
    - name: Save Docker image
      run: |
        docker save myapp:latest | gzip > myapp-image.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: myapp-image.tar.gz

  test:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        gunzip -c myapp-image.tar.gz | docker load
    
    - name: Start container for testing
      run: |
        docker run -d --name test-container -p 3000:3000 myapp:latest
        sleep 10  # Wait for container to start
    
    - name: Run basic test
      run: |
        # Test if the application responds
        curl -f http://localhost:3000 || exit 1
        echo "Basic test passed!"
    
    - name: Stop test container
      run: |
        docker stop test-container
        docker rm test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Copy Docker image to server
      run: |
        scp -i ~/.ssh/deploy_key myapp-image.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
    
    - name: Deploy to server
      run: |
        ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Load the new image
          gunzip -c /tmp/myapp-image.tar.gz | docker load
          
          # Stop and remove existing container if it exists
          docker stop myapp-container 2>/dev/null || true
          docker rm myapp-container 2>/dev/null || true
          
          # Run new container
          docker run -d --name myapp-container -p 80:3000 --restart unless-stopped myapp:latest
          
          # Clean up
          rm /tmp/myapp-image.tar.gz
          
          # Remove old unused images (optional)
          docker image prune -f
        EOF
    
    - name: Verify deployment
      run: |
        sleep 10
        ssh -i ~/.ssh/deploy_key ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Check if container is running
          if docker ps | grep -q myapp-container; then
            echo "Deployment successful! Container is running."
          else
            echo "Deployment failed! Container is not running."
            exit 1
          fi
        EOF